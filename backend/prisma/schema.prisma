// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String    @unique
  password  String
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  Poll      Poll[]
  Vote      Vote[]

  @@map("users")
}

model Poll {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question   String
  userId     String?   @map("user_id") @db.Uuid
  isActive   Boolean?  @default(true) @map("is_active")
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  User       User?     @relation(fields: [userId], references: [id])
  Option     Option[]
  Vote       Vote[]

  @@map("polls")
}

model Option {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pollId     String? @map("poll_id") @db.Uuid
  text       String
  votesCount Int?    @default(0) @map("votes_count")
  polls      Poll?   @relation(fields: [pollId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Vote       Vote[]

  @@map("options")
}

model Vote {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pollId   String?   @map("poll_id") @db.Uuid
  userId   String?   @map("user_id") @db.Uuid
  optionId String?   @map("option_id") @db.Uuid
  voter_ip String
  voted_at DateTime? @default(now()) @db.Timestamptz(6)
  Poll     Poll?     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  Option   Option?   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  User     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("votes")
}
